/*
// Definition for a Node.
class Node {
    public int val;
    public List<Node> neighbors;
    public Node() {
        val = 0;
        neighbors = new ArrayList<Node>();
    }
    public Node(int _val) {
        val = _val;
        neighbors = new ArrayList<Node>();
    }
    public Node(int _val, ArrayList<Node> _neighbors) {
        val = _val;
        neighbors = _neighbors;
    }
}
*/

class Solution {
    
    //133. Clone Graph
    //Time complexity : O(V+E) where V is the no of vertices and E is no of edges
    //Space complexity : O(V+E)
    
    public Node cloneGraph(Node node) {
        
        if(node == null)
            return null;
        
        Queue<Node> q = new LinkedList<>();
        Map<Node,Node> map = new HashMap<>();
        Node copyNode = new Node(node.val);   //1'
        
        map.put(node,copyNode);      //1-->1'
        q.add(node);
        
            
        while(!q.isEmpty()){
            
            Node curr = q.poll();  //1
            for(Node n : curr.neighbors){
                if(!map.containsKey(n)){
                    Node copy = new Node(n.val);
                    map.put(n,copy);    //2--> 2'
                    q.add(n);
                }
                
                map.get(curr).neighbors.add(map.get(n));
                
            }
           
        }
        return copyNode;
        
        
    }
}