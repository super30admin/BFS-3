class Solution {
    
    //Using BFS
    //301. Remove Invalid Parentheses
    //Time complexity : exponential --O(2^n *n^2)
    
    public List<String> removeInvalidParentheses(String s) {
        
        List<String> result = new ArrayList<>();
        if(s==null)
            return result;
        
        Queue<String> q = new LinkedList<>();
        Set<String> set = new HashSet<>();
        q.add(s);
        boolean flag = false;
        while(!q.isEmpty()){
            int size = q.size();
            for(int k=0;k<size;k++){
                String curr = q.poll();
                if(isValid(curr)){
                    flag = true;
                    result.add(curr);
                }
                //if found any valid string at that level, don't add it's children
                if(!flag){
                    for(int i=0;i<curr.length();i++){
                        if(Character.isLetter(curr.charAt(i)))
                           
                           continue;
                        String child = curr.substring(0,i) + curr.substring(i+1);
                        if(!set.contains(child)){
                             set.add(child);
                             q.add(child);
                        }
                       
                    }
                }
            }
        }
        return result;
        
    }
    private boolean isValid(String str){
            int count =0;
            for(int i=0;i <str.length();i++){
                if(str.charAt(i) =='(')
                    count++;
                else if(str.charAt(i) ==')'){
                    if(count ==0)           //if first character is a closing
                        return false;
                    count--;
                }
            }
            return count==0;
        }
        
    }
